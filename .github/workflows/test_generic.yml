name: Library - Test
on:
  workflow_call:
    inputs:
      refspec:
        description: "The commit SHA"
        type: string
        required: True
      environment:
        description: "Environment to deploy to"
        type: string
        required: true
      uptime-robot-monitor-dry-run:
        type: string
        description: "Set to '--dry-run' to not actually create monitors"
        default: ""
        required: false

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      postgres:
        image: postgres:12.3-alpine
        env:
          POSTGRES_USER: passport_scorer
          POSTGRES_PASSWORD: passport_scorer_pwd
          POSTGRES_DB: passport_scorer

        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.refspec }}
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install poetry
        run: |
          pip3 install pipx
          pipx ensurepath
          pipx install poetry
          pipx inject poetry poetry-plugin-export

      - name: Generate requirements.txt
        working-directory: ./api
        run: poetry export -f requirements.txt -o requirements.txt --with dev,server

      - name: Install API dependencies
        working-directory: ./api
        run: pip3 install -r requirements.txt

      - name: Django Check
        working-directory: ./api
        env:
          CERAMIC_CACHE_SCORER_ID: ""
          SECRET_KEY: secret-test-value
        run: python manage.py check

      - name: Load secret
        id: op-load-secret
        uses: 1password/load-secrets-action@v1
        with:
          export-env: true
        env:
          UPTIME_ROBOT_READONLY_API_KEY: op://DevOps/passport-scorer-review-secrets/ci/UPTIME_ROBOT_READONLY_API_KEY
          IGNORE_UNMONITORED_URLS: op://DevOps/passport-scorer-review-env/ci/IGNORE_UNMONITORED_URLS
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

          UPTIME_ROBOT_API_KEY: op://DevOps/uptime-robot-config/ci/UPTIME_ROBOT_API_KEY
          REGISTRY_API_KEY: op://DevOps/uptime-robot-config/ci/REGISTRY_API_KEY
          REGISTRY_ROUND_ID: op://DevOps/uptime-robot-config/ci/REGISTRY_ROUND_ID
          REGISTRY_SCORER_ID: op://DevOps/uptime-robot-config/ci/REGISTRY_SCORER_ID
          REGISTRY_ADDRESS: op://DevOps/uptime-robot-config/ci/REGISTRY_ADDRESS
          CERAMIC_CACHE_JWT_TOKEN: op://DevOps/uptime-robot-config/ceramic-cache/JWT_TOKEN
          CERAMIC_CACHE_ADDRESS: op://DevOps/uptime-robot-config/ceramic-cache/ADDRESS

      - name: URL Monitoring Check
        working-directory: ./api
        shell: bash
        env:
          CERAMIC_CACHE_SCORER_ID: ""
          SECRET_KEY: secret-test-value
          UPTIME_ROBOT_API_KEY: ${{ env.UPTIME_ROBOT_API_KEY }}

          REGISTRY_API_KEY: ${{ env.REGISTRY_API_KEY }}
          REGISTRY_ROUND_ID: ${{ env.REGISTRY_ROUND_ID }}
          REGISTRY_SCORER_ID: ${{ env.REGISTRY_SCORER_ID }}
          REGISTRY_ADDRESS: ${{ env.REGISTRY_ADDRESS }}
          CERAMIC_CACHE_JWT_TOKEN: ${{ env.CERAMIC_CACHE_JWT_TOKEN }}
          CERAMIC_CACHE_ADDRESS: ${{ env.CERAMIC_CACHE_ADDRESS }}
          FF_V2_API: on

        run: python manage.py get_unmonitored_urls --base-url https://api.scorer.gitcoin.co/ --base-url-xyz https://api.passport.xyz/ ${{ inputs.uptime-robot-monitor-dry-run }}

      - name: Run API unittests
        working-directory: ./api
        run: pytest
        env:
          CERAMIC_CACHE_SCORER_ID: ""
          SECRET_KEY: secret-test-value
          DATABASE_URL: postgres://passport_scorer:passport_scorer_pwd@localhost:5432/passport_scorer
          DATA_MODEL_DATABASE_URL: postgres://passport_scorer:passport_scorer_pwd@localhost:5432/passport_scorer
          FF_API_ANALYTICS: on
