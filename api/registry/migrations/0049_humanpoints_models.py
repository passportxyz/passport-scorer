# Generated by Django 4.2.6 on 2025-06-24 - Consolidated Human Points migration

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("account", "0043_community_human_points_program"),
        ("registry", "0048_alter_batchmodelscoringrequest_status_and_more"),
    ]

    operations = [
        # Create HumanPointsMultiplier model
        migrations.CreateModel(
            name="HumanPointsMultiplier",
            fields=[
                (
                    "address",
                    models.CharField(max_length=100, primary_key=True, serialize=False),
                ),
                ("multiplier", models.IntegerField(default=2)),
            ],
            options={
                "verbose_name": "Human Points Multiplier",
                "verbose_name_plural": "Human Points Multipliers",
            },
        ),
        # Create HumanPoints model with Action choices
        migrations.CreateModel(
            name="HumanPoints",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("address", models.CharField(db_index=True, max_length=100)),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("SCB", "Scoring Bonus"),
                            ("HKY", "Human Keys"),
                            ("ISB", "Identity Staking Bronze"),
                            ("ISS", "Identity Staking Silver"),
                            ("ISG", "Identity Staking Gold"),
                            ("CSB", "Community Staking Beginner"),
                            ("CSE", "Community Staking Experienced"),
                            ("CST", "Community Staking Trusted"),
                            ("PMT", "Passport Mint"),
                            ("HIM", "Human Id Mint"),
                        ],
                        db_index=True,
                        max_length=3,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("tx_hash", models.CharField(blank=True, max_length=100, null=True)),
                ("chain_id", models.IntegerField(blank=True, null=True, db_index=True)),
            ],
            options={
                "verbose_name": "Human Point",
                "verbose_name_plural": "Human Points",
                "indexes": [
                    models.Index(
                        fields=["address", "action"],
                        name="registry_hu_address_5fea1a_idx",
                    ),
                    models.Index(
                        fields=["chain_id", "action"],
                        name="registry_hu_chain_id_action_idx",
                    ),
                ],
            },
        ),
        # Create HumanPointsConfig model
        migrations.CreateModel(
            name="HumanPointsConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("action", models.CharField(db_index=True, max_length=50, unique=True)),
                ("points", models.IntegerField()),
                ("active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Human Points Configuration",
                "verbose_name_plural": "Human Points Configurations",
                "indexes": [
                    models.Index(
                        fields=["action", "active"],
                        name="registry_hu_action_230641_idx",
                    ),
                ],
            },
        ),
        # Create HumanPointsCommunityQualifiedUsers model
        migrations.CreateModel(
            name="HumanPointsCommunityQualifiedUsers",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("address", models.CharField(db_index=True, max_length=100)),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="human_points_qualified_users",
                        to="account.community",
                    ),
                ),
            ],
            options={
                "verbose_name": "Human Points Community Qualified User",
                "verbose_name_plural": "Human Points Community Qualified Users",
                "indexes": [
                    models.Index(
                        fields=["address"], name="registry_hu_address_0abb23_idx"
                    ),
                ],
                "unique_together": {("address", "community")},
            },
        ),
        # Add unique constraints for HumanPoints
        # Unique constraint for binary actions (stamps, staking) - excluding HKY since it needs tx_hash
        migrations.RunSQL(
            "CREATE UNIQUE INDEX idx_binary_actions ON registry_humanpoints(address, action) "
            "WHERE action IN ('SCB', 'ISB', 'ISS', 'ISG', 'CSB', 'CSE', 'CST');",
            reverse_sql="DROP INDEX IF EXISTS idx_binary_actions;",
        ),
        # Unique constraint for actions that require tx_hash (mints and human keys)
        migrations.RunSQL(
            "CREATE UNIQUE INDEX idx_tx_hash_actions ON registry_humanpoints(address, action, tx_hash) "
            "WHERE action IN ('PMT', 'HIM', 'HKY');",
            reverse_sql="DROP INDEX IF EXISTS idx_tx_hash_actions;",
        ),
    ]
